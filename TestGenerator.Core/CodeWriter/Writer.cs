using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TestGenerator.Core.CodeWriter;

internal class Writer
{
    private readonly string _code;
    private readonly SyntaxTree _syntaxTree;

    public Writer(string code)
    {
        _code = code;
        _syntaxTree = CSharpSyntaxTree.ParseText(_code);
    }

    public IEnumerable<TestInfo> Generate()
    {
        var usings = _syntaxTree.GetRoot().DescendantNodes().OfType<UsingDirectiveSyntax>().ToList();
        var classes = _syntaxTree.GetRoot().DescendantNodes().OfType<ClassDeclarationSyntax>().ToList();

        var testClasses = classes.Select(ProcessClass).ToList();

        foreach (var testClass in testClasses)
        {
            var @namespace = testClass.Namespace;

            var code = SyntaxFactory.CompilationUnit()
                .WithUsings(
                    SyntaxFactory.List(
                        usings)
                )
                .WithMembers(
                    SyntaxFactory.SingletonList<MemberDeclarationSyntax>(
                        SyntaxFactory.NamespaceDeclaration(
                                SyntaxFactory.ParseName(@namespace.Name.ToFullString() + ".Tests"))
                            .WithMembers(
                                SyntaxFactory.List<MemberDeclarationSyntax>(
                                    SyntaxFactory.SingletonList(testClass.ClassSyntax)
                                )
                            )
                    )
                ).NormalizeWhitespace().ToFullString();

            yield return new TestInfo(testClass.ClassSyntax.Identifier.Text, code);
        }
    }

    private static (NamespaceDeclarationSyntax Namespace, ClassDeclarationSyntax ClassSyntax) ProcessClass(ClassDeclarationSyntax classSyntax)
    {
        var testClass = SyntaxFactory.ClassDeclaration($"{classSyntax.Identifier.Text}Tests")
            .WithModifiers(
                SyntaxFactory.TokenList(
                    SyntaxFactory.Token(SyntaxKind.PublicKeyword)))
            .WithMembers(
                SyntaxFactory.List<MemberDeclarationSyntax>(
                    GetMethods(classSyntax)
                )
            )
            .WithAttributeLists(
                SyntaxFactory.SingletonList(
                    SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("TestFixture")
                            )
                        )
                    )
                )
            );

        return (classSyntax.Parent as NamespaceDeclarationSyntax, testClass)!;
    }

    private static IEnumerable<MethodDeclarationSyntax> GetMethods(ClassDeclarationSyntax classSyntax)
    {
        var methodGroups = classSyntax.DescendantNodes().OfType<MethodDeclarationSyntax>()
            .GroupBy(m => m.Identifier.Text);

        foreach (var group in methodGroups)
        {
            var methods = group.ToList();

            int? i = methods.Count == 1 ? null : 1;

            foreach (var method in methods)
            {
                yield return SyntaxFactory.MethodDeclaration(
                        SyntaxFactory.PredefinedType(
                            SyntaxFactory.Token(SyntaxKind.VoidKeyword)),
                        SyntaxFactory.Identifier(method.Identifier.Text + (i?.ToString() ?? "") + "Test"))
                    .WithModifiers(
                        SyntaxFactory.TokenList(
                            SyntaxFactory.Token(SyntaxKind.PublicKeyword)))
                    .WithBody(
                        SyntaxFactory.Block(
                            SyntaxFactory.SingletonList(
                                SyntaxFactory.ParseStatement("Assert.Fail(\"autogenerated\");")
                            )
                        )
                    )
                    .WithAttributeLists(
                        SyntaxFactory.SingletonList(
                            SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("Test")
                                    )
                                )
                            )
                        )
                    );

                if (i is not null) i++;
            }
        }
    }
}